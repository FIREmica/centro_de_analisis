'use server';

/**
 * @fileOverview A Genkit flow for generating a detailed vulnerability report from a user registration page URL analysis.
 *
 * - generateVulnerabilityReport - A function that handles the generation of the vulnerability report.
 * - GenerateVulnerabilityReportInput - The input type for the generateVulnerabilityReport function.
 * - GenerateVulnerabilityReportOutput - The return type for the generateVulnerabilityReport function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

// Define the structure of a single finding for the input analysis string
const FindingDetailSchema = z.object({
  vulnerability: z.string(),
  description: z.string(),
  isVulnerable: z.boolean(),
  severity: z.string(), // Keep as string for flexibility in the prompt template
  potentialForAccountLockout: z.boolean(),
  remediation: z.string(),
});

const GenerateVulnerabilityReportInputSchema = z.object({
  url: z.string().url().describe("The URL that was analyzed."),
  analysisSummary: z.string().describe(
      'A summary of the analysis findings, ideally formatted clearly. Each finding should detail the vulnerability category, description, severity, whether it was detected (isVulnerable), potential for account lockout, and remediation.'
    ),
});

export type GenerateVulnerabilityReportInput = z.infer<
  typeof GenerateVulnerabilityReportInputSchema
>;

const GenerateVulnerabilityReportOutputSchema = z.object({
  report: z
    .string()
    .describe(
      'A detailed, well-structured vulnerability report summarizing the findings, explaining the risks, and prioritizing based on severity. Should be formatted for readability.'
    ),
});

export type GenerateVulnerabilityReportOutput = z.infer<
  typeof GenerateVulnerabilityReportOutputSchema
>;

export async function generateVulnerabilityReport(
  input: GenerateVulnerabilityReportInput
): Promise<GenerateVulnerabilityReportOutput> {
  return generateVulnerabilityReportFlow(input);
}

const generateVulnerabilityReportPrompt = ai.definePrompt({
  name: 'generateVulnerabilityReportPrompt',
  input: {schema: GenerateVulnerabilityReportInputSchema},
  output: {schema: GenerateVulnerabilityReportOutputSchema},
  prompt: `
  You are a cybersecurity analyst tasked with creating a clear and concise security report based on an automated vulnerability scan of a user registration page.

  Analyzed URL: {{{url}}}

  Scan Findings Summary:
  {{{analysisSummary}}}

  Generate a detailed vulnerability report based *only* on the provided findings. Structure the report logically:
  1.  **Executive Summary:** Briefly state the overall security posture based on the findings (e.g., significant risks found, minor issues, generally secure). Mention the number of high/medium severity findings.
  2.  **Detailed Findings:** For each vulnerability where 'isVulnerable' is true:
      *   Clearly state the **Vulnerability Category** and **Severity**.
      *   Explain the **Specific Finding** (from the description).
      *   Describe the **Potential Impact** in simple terms (e.g., "Could allow attackers to steal user session cookies," "Might enable attackers to lock out legitimate users," "Could lead to exposure of sensitive information"). Consider both the severity and the 'potentialForAccountLockout' flag.
      *   List the **Recommended Remediation**.
  3.  **Conclusion:** Briefly reiterate the key risks and emphasize the importance of addressing the identified vulnerabilities.

  Format the report using markdown for readability (e.g., use headings, bullet points).
  If the analysis summary indicates no vulnerabilities were found ('isVulnerable' is always false or the summary is empty/negative), generate a report stating that the scan did not detect specific issues based on the checks performed, but recommend general security best practices (like regular audits, secure coding).
  Focus solely on the information provided in the analysis summary. Do not invent new vulnerabilities.
  `,
});


const generateVulnerabilityReportFlow = ai.defineFlow(
  {
    name: 'generateVulnerabilityReportFlow',
    inputSchema: GenerateVulnerabilityReportInputSchema,
    outputSchema: GenerateVulnerabilityReportOutputSchema,
  },
  async input => {
    const {output} = await generateVulnerabilityReportPrompt(input);
    // Ensure a report is always returned, even if empty or stating no findings.
    return output || { report: "No vulnerabilities were detected in this scan, or the analysis could not be completed." };
  }
);
