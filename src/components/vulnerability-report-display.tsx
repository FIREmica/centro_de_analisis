"use client";

import type { AnalysisResult } from "@/types";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { AlertTriangle, CheckCircle2, FileText, Info, LockKeyhole, ShieldAlert, ShieldCheck, ShieldOff, XCircle } from "lucide-react";
import { Badge } from "@/components/ui/badge";

type VulnerabilityReportDisplayProps = {
  result: AnalysisResult | null;
};

function getSeverityColor(isVulnerable: boolean, potentialForAccountLockout: boolean) {
  if (isVulnerable && potentialForAccountLockout) return "bg-destructive text-destructive-foreground";
  if (isVulnerable) return "bg-yellow-500 text-black"; // Using Tailwind direct color for specific yellow
  return "bg-green-500 text-white"; // Using Tailwind direct color for specific green
}

export function VulnerabilityReportDisplay({ result }: VulnerabilityReportDisplayProps) {
  if (!result) {
    return (
      <Card className="mt-8 shadow-lg">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-xl">
            <Info className="h-6 w-6 text-primary" />
            Awaiting Analysis
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-muted-foreground">
            Enter a URL above and click "Scan Vulnerabilities" to see the analysis report.
          </p>
        </CardContent>
      </Card>
    );
  }

  if (result.error) {
    return (
      <Card className="mt-8 border-destructive bg-destructive/10 shadow-lg">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-xl text-destructive">
            <AlertTriangle className="h-6 w-6" />
            Analysis Error
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-destructive-foreground">{result.error}</p>
        </CardContent>
      </Card>
    );
  }
  
  const hasVulnerabilities = result.vulnerabilities && result.vulnerabilities.length > 0;

  return (
    <div className="mt-8 space-y-8">
      {result.reportText && (
        <Card className="shadow-lg">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-xl">
              <FileText className="h-6 w-6 text-primary" />
              Generated Security Report
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="prose dark:prose-invert max-w-none whitespace-pre-wrap text-foreground">
              {result.reportText}
            </div>
          </CardContent>
        </Card>
      )}

      <Card className="shadow-lg">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-xl">
            <ShieldAlert className="h-6 w-6 text-primary" />
            Detailed Vulnerability Findings
          </CardTitle>
          {!hasVulnerabilities && (
            <CardDescription>No specific vulnerabilities detected by the scan.</CardDescription>
          )}
        </CardHeader>
        {hasVulnerabilities && (
          <CardContent>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Vulnerability</TableHead>
                  <TableHead className="text-center">Detected</TableHead>
                  <TableHead className="text-center">Account Lockout Risk</TableHead>
                  <TableHead>Recommended Fix</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {result.vulnerabilities!.map((vuln, index) => (
                  <TableRow key={index} className={vuln.isVulnerable ? "bg-muted/30" : ""}>
                    <TableCell className="font-medium">{vuln.vulnerability}</TableCell>
                    <TableCell className="text-center">
                      {vuln.isVulnerable ? (
                        <ShieldCheck className="h-5 w-5 text-green-600 inline-block" />
                      ) : (
                        <ShieldOff className="h-5 w-5 text-muted-foreground inline-block" />
                      )}
                    </TableCell>
                    <TableCell className="text-center">
                      {vuln.potentialForAccountLockout ? (
                        <LockKeyhole className="h-5 w-5 text-destructive inline-block" />
                      ) : (
                         <CheckCircle2 className="h-5 w-5 text-green-600 inline-block" />
                      )}
                    </TableCell>
                    <TableCell className="text-sm text-muted-foreground">{vuln.remediation}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </CardContent>
        )}
      </Card>
    </div>
  );
}
