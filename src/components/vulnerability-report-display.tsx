
"use client";

import type { AnalysisResult, VulnerabilityFinding } from "@/types";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { AlertTriangle, CheckCircle2, FileText, Info, LockKeyhole, ShieldAlert, ShieldCheck, ShieldOff, FileWarning, CircleAlert, ServerIcon, Database, Globe } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { Tooltip, TooltipContent, TooltipTrigger } from "@/components/ui/tooltip";
import { ScrollArea } from "@/components/ui/scroll-area"; 
import { cn } from "@/lib/utils";

type VulnerabilityReportDisplayProps = {
  result: AnalysisResult | null;
};

const renderMarkdownReport = (markdownText: string | null) => {
  if (!markdownText) return null;

  const lines = markdownText.split('\n');
  const elements: JSX.Element[] = [];
  let currentParagraphLines: string[] = [];
  let currentListItems: string[] = [];
  let inList = false;

  const flushParagraph = () => {
    if (currentParagraphLines.length > 0) {
      elements.push(
        <p key={`p-${elements.length}`} className="my-2 text-sm leading-relaxed">
          {currentParagraphLines.join('\n').split(/(\*\*.*?\*\*|```[\s\S]*?```|`.*?`)/g).map((part, index) => {
            if (part.startsWith('**') && part.endsWith('**')) {
              return <strong key={index}>{part.slice(2, -2)}</strong>;
            }
            if (part.startsWith('```') && part.endsWith('```')) {
              const codeContent = part.slice(3, -3);
              const lang = codeContent.match(/^(\w+)\n/)?.[1];
              const actualCode = lang ? codeContent.substring(lang.length + 1) : codeContent;
              return <pre key={index} className="bg-muted p-2 rounded-md text-xs overflow-x-auto my-2"><code className={lang ? `language-${lang}`: ''}>{actualCode}</code></pre>;
            }
            if (part.startsWith('`') && part.endsWith('`')) {
              return <code key={index} className="bg-muted px-1 py-0.5 rounded text-xs">{part.slice(1, -1)}</code>;
            }
            return part;
          })}
        </p>
      );
      currentParagraphLines = [];
    }
  };

  const flushList = () => {
    if (currentListItems.length > 0) {
      elements.push(
        <ul key={`ul-${elements.length}`} className="list-disc space-y-1 pl-5 my-2 text-sm">
          {currentListItems.map((item, idx) => (
            <li key={`li-${elements.length}-${idx}`} dangerouslySetInnerHTML={{ __html: item.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>').replace(/`(.*?)`/g, '<code class="bg-muted px-1 py-0.5 rounded text-xs">$1</code>') }}>
            </li>
          ))}
        </ul>
      );
    }
    currentListItems = [];
    inList = false;
  };

  for (let i = 0; i < lines.length; i++) {
    let line = lines[i];

    if (line.startsWith('```')) {
      flushParagraph();
      flushList();
      let codeBlock = line + '\n';
      i++;
      while(i < lines.length && !lines[i].startsWith('```')) {
        codeBlock += lines[i] + '\n';
        i++;
      }
      if (i < lines.length) codeBlock += lines[i]; // Add closing ```
      elements.push(<div key={`codeblock-${elements.length}`} dangerouslySetInnerHTML={{__html: renderMarkdownReport(codeBlock)!.props.children}}/>) 
      continue;
    }


    if (line.startsWith('# ')) {
      flushParagraph(); flushList();
      elements.push(<h1 key={`h1-${i}`} className="text-2xl font-bold mt-6 mb-3 pb-2 border-b border-border" dangerouslySetInnerHTML={{ __html: line.substring(2).replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>') }}/>);
    } else if (line.startsWith('## ')) {
      flushParagraph(); flushList();
      elements.push(<h2 key={`h2-${i}`} className="text-xl font-semibold mt-4 mb-2 pb-1 border-b border-border" dangerouslySetInnerHTML={{ __html: line.substring(3).replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>') }}/>);
    } else if (line.startsWith('### ')) {
      flushParagraph(); flushList();
      elements.push(<h3 key={`h3-${i}`} className="text-lg font-semibold mt-3 mb-1" dangerouslySetInnerHTML={{ __html: line.substring(4).replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>') }}/>);
    } else if (line.startsWith('#### ')) {
      flushParagraph(); flushList();
      elements.push(<h4 key={`h4-${i}`} className="text-base font-semibold mt-2 mb-1" dangerouslySetInnerHTML={{ __html: line.substring(5).replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>') }}/>);
    } else if (line.startsWith('* ') || line.startsWith('- ')) {
      flushParagraph();
      if (!inList) inList = true;
      currentListItems.push(line.substring(2));
    } else if (line.trim() === '') {
      flushParagraph(); flushList();
    } else { 
      if (inList) flushList();
      currentParagraphLines.push(line);
    }
  }
  flushParagraph(); flushList(); 
  return <div className="space-y-1">{elements}</div>;
};


export function VulnerabilityReportDisplay({ result }: VulnerabilityReportDisplayProps) {
  if (!result) {
    return (
      <Card className="shadow-lg mt-8">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-xl">
            <Info className="h-6 w-6 text-blue-500" />
            Informe de Vulnerabilidades
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-muted-foreground">
            Aún no se ha realizado ningún análisis. Ingresa los detalles en el formulario para comenzar.
          </p>
        </CardContent>
      </Card>
    );
  }
  if (result.error && !result.reportText && !result.allFindings?.length) { // Show error only if no partial data
    return (
      <Card className="shadow-lg mt-8 border-l-4 border-destructive">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-xl text-destructive">
            <AlertTriangle className="h-6 w-6" />
            Error en el Análisis
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-foreground">{result.error}</p>
          <p className="text-sm text-muted-foreground mt-2">
            No se pudieron generar los resultados del análisis. Por favor, verifica tu entrada o inténtalo más tarde.
          </p>
        </CardContent>
      </Card>
    );
  }
  
  const findings = result.allFindings || [];
  const hasVulnerableFindings = findings.some(v => v.isVulnerable);

  const getSeverityDetails = (severity: VulnerabilityFinding['severity']) => {
    switch (severity) {
      case 'Critical':
      case 'High':
        return { icon: <ShieldAlert className="h-5 w-5 text-destructive" />, badge: <Badge variant="destructive">{severity}</Badge>, tooltip: `Vulnerabilidad de riesgo ${severity.toLowerCase()}.`, rowClass: "bg-destructive/5" };
      case 'Medium':
        return { icon: <AlertCircle className="h-5 w-5 text-orange-500" />, badge: <Badge variant="outline" className="border-orange-500 text-orange-500">Media</Badge>, tooltip: "Vulnerabilidad de riesgo medio.", rowClass: "bg-orange-500/5" };
      case 'Low':
        return { icon: <FileWarning className="h-5 w-5 text-yellow-600" />, badge: <Badge variant="outline" className="border-yellow-600 text-yellow-600">Baja</Badge>, tooltip: "Vulnerabilidad de bajo riesgo.", rowClass: "bg-yellow-600/5" };
      case 'Informational':
      default:
        return { icon: <Info className="h-5 w-5 text-blue-500" />, badge: <Badge variant="outline" className="border-blue-500 text-blue-500">Info</Badge>, tooltip: "Hallazgo informativo.", rowClass: "bg-blue-500/5" };
    }
  };
  
  const getSourceIcon = (source?: "URL" | "Server" | "Database") => {
    switch(source) {
        case "URL": return <Globe className="h-4 w-4 text-blue-600"/>;
        case "Server": return <ServerIcon className="h-4 w-4 text-green-600"/>;
        case "Database": return <Database className="h-4 w-4 text-purple-600"/>;
        default: return <Info className="h-4 w-4 text-gray-500"/>;
    }
  };

  const renderIconWithTooltip = (icon: React.ReactNode, tooltipText: string, triggerClassName?: string) => (
    <Tooltip>
      <TooltipTrigger asChild><span className={cn("inline-flex items-center justify-center", triggerClassName)}>{icon}</span></TooltipTrigger>
      <TooltipContent><p>{tooltipText}</p></TooltipContent>
    </Tooltip>
  );

  return (
    <div className="mt-8 space-y-8">
      {result.reportText && (
        <Card className="shadow-lg">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-xl">
              <FileText className="h-6 w-6 text-primary" />
              Informe de Seguridad Integral Generado por IA
            </CardTitle>
          </CardHeader>
          <CardContent>
             <ScrollArea className="h-[400px] w-full rounded-md border border-border p-4 bg-secondary/20 prose dark:prose-invert max-w-none prose-headings:my-2 prose-p:my-1 prose-ul:my-1">
                {renderMarkdownReport(result.reportText)}
             </ScrollArea>
          </CardContent>
        </Card>
      )}

      {result.error && ( // Display non-critical errors if there's other data
        <Card className="border-yellow-500 bg-yellow-500/10 shadow-sm">
          <CardHeader><CardTitle className="text-yellow-700 dark:text-yellow-400 flex items-center gap-2"><AlertTriangle />Aviso sobre el Análisis</CardTitle></CardHeader>
          <CardContent><p className="text-yellow-700 dark:text-yellow-500">{result.error}</p></CardContent>
        </Card>
      )}

      <Card className="shadow-lg">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-xl">
            <ShieldCheck className="h-6 w-6 text-primary" />
            Hallazgos Detallados (Todas las Fuentes)
          </CardTitle>
          {findings.length === 0 ? (
            <CardDescription>No se identificaron hallazgos específicos durante este escaneo.</CardDescription>
          ) : !hasVulnerableFindings ? (
             <CardDescription>No se detectaron vulnerabilidades activas, aunque se listan algunos hallazgos informativos.</CardDescription>
          ) : (
              <CardDescription>Se detectaron las siguientes vulnerabilidades y hallazgos. Prioriza la corrección según la severidad.</CardDescription>
          )}
        </CardHeader>
        {findings.length > 0 && (
          <CardContent>
            <ScrollArea className="max-h-[600px] overflow-y-auto">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead className="w-[80px]">Origen</TableHead>
                  <TableHead>Categoría</TableHead>
                  <TableHead>Hallazgo Específico</TableHead>
                  <TableHead className="text-center w-[150px]">Severidad</TableHead>
                  <TableHead className="text-center w-[100px]">Detectado</TableHead>
                  {findings.some(f => f.potentialForAccountLockout) && <TableHead className="text-center w-[120px]">Riesgo Bloqueo</TableHead>}
                  <TableHead>Solución Recomendada</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {findings.map((vuln, index) => {
                  const severityDetails = getSeverityDetails(vuln.severity);
                  const rowClass = vuln.isVulnerable ? severityDetails.rowClass : ""; 

                  return (
                    <TableRow key={index} className={cn(rowClass, "hover:bg-muted/20")}>
                      <TableCell className="font-medium text-xs">
                        {renderIconWithTooltip(getSourceIcon(vuln.source), vuln.source || "Desconocido", "gap-1")}
                        <span className="ml-1">{vuln.source}</span>
                      </TableCell>
                      <TableCell className="font-medium text-sm">{vuln.vulnerability}</TableCell>
                      <TableCell className="text-xs text-muted-foreground">{vuln.description}</TableCell>
                      <TableCell className="text-center">
                         {renderIconWithTooltip(
                            <span className="flex items-center justify-center gap-1">{severityDetails.icon} {severityDetails.badge}</span>,
                           severityDetails.tooltip
                         )}
                      </TableCell>
                       <TableCell className="text-center">
                        {vuln.isVulnerable ? 
                           renderIconWithTooltip(<CheckCircle2 className="h-5 w-5 text-green-600" />, "Vulnerable") : 
                           renderIconWithTooltip(<ShieldOff className="h-5 w-5 text-muted-foreground" />, "No Vulnerable / Informativo")
                        }
                      </TableCell>
                      {findings.some(f => f.potentialForAccountLockout) && (
                        <TableCell className="text-center">
                          {vuln.potentialForAccountLockout ? 
                             renderIconWithTooltip(<LockKeyhole className="h-5 w-5 text-orange-500" />, "Sí") : 
                             renderIconWithTooltip(<ShieldCheck className="h-5 w-5 text-green-600" />, "No Directo")
                          }
                        </TableCell>
                      )}
                      <TableCell className="text-xs text-muted-foreground">{vuln.remediation}</TableCell>
                    </TableRow>
                  );
                })}
              </TableBody>
            </Table>
            </ScrollArea>
          </CardContent>
        )}
      </Card>
    </div>
  );
}

