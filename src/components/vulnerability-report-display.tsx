
"use client";

import type { AnalysisResult, VulnerabilityFinding } from "@/types";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
// Removed Table, TableBody, TableCell, TableHead, TableHeader, TableRow as main structure is now accordion-based
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { AlertCircle, CheckCircle2, Database, FileText, FileWarning, Globe, Info, LockKeyhole, ServerIcon, ShieldAlert, ShieldCheck, ShieldOff, Sparkles, TriangleAlert, Workflow, Activity, HelpCircle, Eye, LockIcon, ChevronDown } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { Tooltip, TooltipContent, TooltipTrigger } from "@/components/ui/tooltip";
import { ScrollArea } from "@/components/ui/scroll-area"; 
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";

type VulnerabilityReportDisplayProps = {
  result: AnalysisResult | null;
  isPremiumUser: boolean;
};

const renderMarkdownText = (text: string | undefined | null): JSX.Element | null => {
  if (!text) return null;
  return (
    <div className="space-y-1">
      {text.split('\n').map((paragraph, index) => (
        <p key={index} dangerouslySetInnerHTML={{ __html: paragraph.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>').replace(/`(.*?)`/g, '<code class="bg-muted px-1 py-0.5 rounded text-xs">$1</code>') }} />
      ))}
    </div>
  );
};


const renderMarkdownReport = (markdownText: string | null, isPremium: boolean, forTruncation = false): JSX.Element | null => {
  if (!markdownText) return null;

  let textToRender = markdownText;
  const premiumMessage = "\n\n_[...]\n\n**Suscríbase al Modo Premium para ver el informe técnico completo y los detalles de cada hallazgo.**_";
  
  if (!isPremium && forTruncation) {
      const detailStartMarkers = [
        "Detailed Findings and Analysis", 
        "Prioritized Recommendations",
        "Análisis Detallado de Hallazgos", 
        "Recomendaciones Priorizadas" 
      ];
      
      let cutOffIndex = -1;

      for (const marker of detailStartMarkers) {
          const markerIndex = markdownText.toLowerCase().indexOf(marker.toLowerCase());
          if (markerIndex !== -1) {
              if (cutOffIndex === -1 || markerIndex < cutOffIndex) {
                  cutOffIndex = markerIndex;
              }
          }
      }
      
      if (cutOffIndex !== -1) {
          textToRender = markdownText.substring(0, cutOffIndex) + premiumMessage;
      } else {
           const approxChars = markdownText.length > 800 ? 800 : markdownText.length;
           let lastNewLine = markdownText.substring(0, approxChars).lastIndexOf('\n\n');
           if (lastNewLine === -1) lastNewLine = markdownText.substring(0, approxChars).lastIndexOf('\n');
           if (lastNewLine === -1) lastNewLine = approxChars;
           
           textToRender = markdownText.substring(0, lastNewLine) + premiumMessage;
      }
  }


  const lines = textToRender.split('\n');
  const elements: JSX.Element[] = [];
  let currentParagraphLines: string[] = [];
  let currentListItems: string[] = [];
  let inList = false;

  const formatLine = (lineContent: string) => {
    return lineContent
        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
        .replace(/`(.*?)`/g, '<code class="bg-muted px-1 py-0.5 rounded text-xs font-mono">$1</code>')
        .replace(/\[(.*?)\]\((.*?)\)/g, '<a href="$2" target="_blank" rel="noopener noreferrer" class="text-primary hover:underline">$1</a>');
  };


  const flushParagraph = () => {
    if (currentParagraphLines.length > 0) {
      elements.push(
        <p key={`p-${elements.length}`} className="my-2 text-sm leading-relaxed"
           dangerouslySetInnerHTML={{ __html: formatLine(currentParagraphLines.join('\n')) }}/>
      );
      currentParagraphLines = [];
    }
  };

  const flushList = () => {
    if (currentListItems.length > 0) {
      elements.push(
        <ul key={`ul-${elements.length}`} className="list-disc space-y-1 pl-5 my-2 text-sm">
          {currentListItems.map((item, idx) => (
            <li key={`li-${elements.length}-${idx}`} dangerouslySetInnerHTML={{ __html: formatLine(item) }}>
            </li>
          ))}
        </ul>
      );
    }
    currentListItems = [];
    inList = false;
  };

  for (let i = 0; i < lines.length; i++) {
    let line = lines[i];

    if (line.startsWith('```')) {
      flushParagraph(); flushList();
      let codeBlock = '';
      let lang = line.substring(3).trim();
      i++;
      while(i < lines.length && !lines[i].startsWith('```')) {
        codeBlock += lines[i] + '\n';
        i++;
      }
      elements.push(
        <pre key={`codeblock-${elements.length}`} className={`bg-muted p-3 rounded-md text-xs overflow-x-auto my-2 text-foreground border border-border ${lang ? `language-${lang}` : ''}`}>
          <code>{codeBlock.trimEnd()}</code>
        </pre>
      );
      continue;
    }


    if (line.startsWith('# ')) {
      flushParagraph(); flushList();
      elements.push(<h1 key={`h1-${i}`} className="text-2xl font-bold mt-6 mb-3 pb-2 border-b border-border" dangerouslySetInnerHTML={{ __html: formatLine(line.substring(2)) }}/>);
    } else if (line.startsWith('## ')) {
      flushParagraph(); flushList();
      elements.push(<h2 key={`h2-${i}`} className="text-xl font-semibold mt-4 mb-2 pb-1 border-b border-border" dangerouslySetInnerHTML={{ __html: formatLine(line.substring(3)) }}/>);
    } else if (line.startsWith('### ')) {
      flushParagraph(); flushList();
      elements.push(<h3 key={`h3-${i}`} className="text-lg font-semibold mt-3 mb-1" dangerouslySetInnerHTML={{ __html: formatLine(line.substring(4)) }}/>);
    } else if (line.startsWith('#### ')) {
      flushParagraph(); flushList();
      elements.push(<h4 key={`h4-${i}`} className="text-base font-semibold mt-2 mb-1" dangerouslySetInnerHTML={{ __html: formatLine(line.substring(5)) }}/>);
    } else if (line.startsWith('* ') || line.startsWith('- ')) {
      flushParagraph();
      if (!inList) inList = true;
      currentListItems.push(line.substring(2));
    } else if (line.trim() === '') {
      flushParagraph(); flushList();
    } else { 
      if (inList) flushList();
      currentParagraphLines.push(line);
    }
  }
  flushParagraph(); flushList(); 
  return <div className="prose dark:prose-invert max-w-none">{elements}</div>;
};


export function VulnerabilityReportDisplay({ result, isPremiumUser }: VulnerabilityReportDisplayProps) {
  if (!result) {
    return (
      <Card className="shadow-lg mt-8">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-xl">
            <Info className="h-6 w-6 text-primary" />
            Informe de Vulnerabilidades
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-muted-foreground">
            Aún no se ha realizado ningún análisis. Ingresa los detalles en el formulario para comenzar.
          </p>
        </CardContent>
      </Card>
    );
  }
  if (result.error && !result.reportText && !result.allFindings?.length) { 
    return (
      <Card className="shadow-lg mt-8 border-l-4 border-destructive">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-xl text-destructive">
            <TriangleAlert className="h-6 w-6" />
            Error en el Análisis
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-foreground">{result.error}</p>
          <p className="text-sm text-muted-foreground mt-2">
            No se pudieron generar los resultados del análisis. Por favor, verifica tu entrada o inténtalo más tarde.
          </p>
        </CardContent>
      </Card>
    );
  }
  
  const findings = result.allFindings || [];
  const hasVulnerableFindings = findings.some(v => v.isVulnerable);

  const getSeverityDetails = (severity: VulnerabilityFinding['severity']) => {
    switch (severity) {
      case 'Critical':
        return { icon: <ShieldAlert className="h-5 w-5 text-destructive" />, badge: <Badge variant="destructive">Crítica</Badge>, tooltip: `Vulnerabilidad de riesgo crítico.`, rowClass: "bg-destructive/10 hover:bg-destructive/20 data-[state=open]:bg-destructive/20" };
      case 'High':
        return { icon: <ShieldAlert className="h-5 w-5 text-destructive" />, badge: <Badge variant="destructive">Alta</Badge>, tooltip: `Vulnerabilidad de riesgo alto.`, rowClass: "bg-destructive/10 hover:bg-destructive/20 data-[state=open]:bg-destructive/20" };
      case 'Medium':
        return { icon: <AlertCircle className="h-5 w-5 text-orange-500" />, badge: <Badge variant="outline" className="border-orange-500 text-orange-500">Media</Badge>, tooltip: "Vulnerabilidad de riesgo medio.", rowClass: "bg-orange-500/10 hover:bg-orange-500/20 data-[state=open]:bg-orange-500/20" };
      case 'Low':
        return { icon: <FileWarning className="h-5 w-5 text-yellow-600" />, badge: <Badge variant="outline" className="border-yellow-600 text-yellow-600">Baja</Badge>, tooltip: "Vulnerabilidad de bajo riesgo.", rowClass: "bg-yellow-600/10 hover:bg-yellow-600/20 data-[state=open]:bg-yellow-600/20" };
      case 'Informational':
      default:
        return { icon: <Info className="h-5 w-5 text-blue-500" />, badge: <Badge variant="outline" className="border-blue-500 text-blue-500">Info</Badge>, tooltip: "Hallazgo informativo.", rowClass: "bg-blue-500/10 hover:bg-blue-500/20 data-[state=open]:bg-blue-500/20" };
    }
  };
  
  const getSourceIcon = (source?: "URL" | "Server" | "Database") => {
    switch(source) {
        case "URL": return <Globe className="h-4 w-4 text-blue-600"/>;
        case "Server": return <ServerIcon className="h-4 w-4 text-green-600"/>;
        case "Database": return <Database className="h-4 w-4 text-purple-600"/>;
        default: return <HelpCircle className="h-4 w-4 text-gray-500"/>;
    }
  };

  const renderIconWithTooltip = (icon: React.ReactNode, tooltipText: string, triggerClassName?: string) => (
    <Tooltip>
      <TooltipTrigger asChild><span className={cn("inline-flex items-center justify-center", triggerClassName)}>{icon}</span></TooltipTrigger>
      <TooltipContent><p>{tooltipText}</p></TooltipContent>
    </Tooltip>
  );
  
  const AccordionListHeader = () => (
    <div className="flex items-center p-4 border-b bg-muted/50 text-sm font-medium text-muted-foreground sticky top-0 z-10">
      <div className="font-medium text-xs w-[80px] shrink-0 flex items-center gap-1">Origen</div>
      <div className="font-medium flex-1 min-w-0 px-2 truncate">Categoría</div>
      <div className="text-xs text-muted-foreground flex-1 min-w-0 px-2 truncate">Descripción Breve</div>
      <div className="text-center w-[150px] shrink-0 px-2">Severidad</div>
      <div className="text-center w-[100px] shrink-0 px-2">Detectado</div>
      {isPremiumUser && findings.some(f => f.potentialForAccountLockout) && (
        <div className="text-center w-[120px] shrink-0 px-2">Riesgo Bloqueo</div>
      )}
      <div className="text-xs text-muted-foreground flex-1 min-w-[200px] px-2 truncate">Solución Recomendada</div>
      <div className="text-center w-[40px] shrink-0 px-2"> {/* Width for chevron */}
        {isPremiumUser ? "Detalles" : ""}
      </div>
    </div>
  );


  return (
    <div className="mt-8 space-y-8">
      {result.reportText && (
        <Card className="shadow-2xl border-l-4 border-primary">
          <CardHeader>
            <CardTitle className="flex items-center gap-3 text-xl md:text-2xl">
              <FileText className="h-7 w-7 text-primary" />
              Informe de Seguridad Integral Generado por IA
            </CardTitle>
             <CardDescription>
              {isPremiumUser 
                ? "Análisis detallado de los componentes." 
                : "Resumen del análisis. Active el Modo Premium para el informe completo."}
            </CardDescription>
          </CardHeader>
          <CardContent>
             <ScrollArea className="h-auto max-h-[500px] w-full rounded-md border border-border p-4 bg-card shadow-inner">
                {renderMarkdownReport(result.reportText, isPremiumUser, true)}
             </ScrollArea>
          </CardContent>
        </Card>
      )}

      {result.error && !result.reportText && ( 
        <Card className="border-yellow-500 bg-yellow-500/10 shadow-sm">
          <CardHeader><CardTitle className="text-yellow-700 dark:text-yellow-400 flex items-center gap-2"><TriangleAlert />Aviso sobre el Análisis</CardTitle></CardHeader>
          <CardContent><p className="text-yellow-700 dark:text-yellow-500">{result.error}</p></CardContent>
        </Card>
      )}

      <Card className="shadow-2xl border-l-4 border-primary">
        <CardHeader>
          <CardTitle className="flex items-center gap-3 text-xl md:text-2xl">
            <Activity className="h-7 w-7 text-primary" />
            Hallazgos Detallados (Todas las Fuentes)
          </CardTitle>
          {!isPremiumUser && findings.length > 0 && (
            <CardDescription className="text-accent flex items-center gap-1">
              <Sparkles className="inline-block h-4 w-4" />
              Active el Modo Premium para ver todos los detalles técnicos, CVSS, impacto y evidencia de los hallazgos.
            </CardDescription>
          )}
          {isPremiumUser && findings.length === 0 && (
            <CardDescription>No se identificaron hallazgos específicos durante este escaneo.</CardDescription>
          )}
          {isPremiumUser && !hasVulnerableFindings && findings.length > 0 &&(
             <CardDescription>No se detectaron vulnerabilidades activas, aunque se listan algunos hallazgos informativos.</CardDescription>
          )}
          {isPremiumUser && hasVulnerableFindings && (
              <CardDescription>Se detectaron las siguientes vulnerabilidades y hallazgos. Prioriza la corrección según la severidad.</CardDescription>
          )}
        </CardHeader>
        {findings.length > 0 && (
          <CardContent className="p-0 md:p-6 md:pt-0"> {/* Adjusted padding for CardContent */}
            <ScrollArea className="max-h-[700px] overflow-y-auto border rounded-lg">
              <div className="sticky top-0 z-10 bg-card">
                 <AccordionListHeader />
              </div>
              <Accordion type="multiple" collapsible className="w-full">
                {findings.map((vuln, index) => {
                  const severityDetails = getSeverityDetails(vuln.severity);
                  const itemRowClass = vuln.isVulnerable ? severityDetails.rowClass : "bg-background/50 hover:bg-muted/50 data-[state=open]:bg-muted/50";

                  return (
                    <AccordionItem value={`item-${index}`} key={index} className={cn("border-b last:border-b-0", itemRowClass)}>
                       <AccordionTrigger className={cn(
                        "flex w-full text-left p-4 items-center text-sm group",
                        "hover:bg-muted/60 focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-1", // Enhanced focus and hover
                        itemRowClass // Apply severity-based background from itemRowClass which includes hover and open states
                      )}>
                        {/* Column 1: Origen */}
                        <div className="font-medium text-xs w-[80px] shrink-0 flex items-center gap-1">
                          {renderIconWithTooltip(getSourceIcon(vuln.source), vuln.source || "Desconocido")}
                          <span>{vuln.source}</span>
                        </div>
                        {/* Column 2: Categoría */}
                        <div className="font-medium flex-1 min-w-0 px-2 truncate" title={vuln.vulnerability}>{vuln.vulnerability}</div>
                        {/* Column 3: Descripción Breve */}
                        <div className="text-xs text-muted-foreground flex-1 min-w-0 px-2 truncate" title={vuln.description}>{vuln.description}</div>
                        {/* Column 4: Severidad */}
                        <div className="text-center w-[150px] shrink-0 px-2">
                          {renderIconWithTooltip(
                            <span className="flex items-center justify-center gap-1">{severityDetails.icon} {severityDetails.badge}</span>,
                          severityDetails.tooltip
                          )}
                        </div>
                        {/* Column 5: Detectado */}
                        <div className="text-center w-[100px] shrink-0 px-2">
                          {vuln.isVulnerable ? 
                          renderIconWithTooltip(<CheckCircle2 className="h-5 w-5 text-green-600" />, "Vulnerable") : 
                          renderIconWithTooltip(<ShieldOff className="h-5 w-5 text-muted-foreground" />, "No Vulnerable / Informativo")
                          }
                        </div>
                        {/* Column 6: Riesgo Bloqueo (Premium) */}
                        {isPremiumUser && findings.some(f => f.potentialForAccountLockout) && (
                            <div className="text-center w-[120px] shrink-0 px-2">
                            {vuln.potentialForAccountLockout ? 
                                renderIconWithTooltip(<LockKeyhole className="h-5 w-5 text-orange-500" />, "Sí, posible") : 
                                renderIconWithTooltip(<ShieldCheck className="h-5 w-5 text-green-600" />, "No Directo")
                            }
                            </div>
                        )}
                        {/* Column 7: Solución Recomendada */}
                        <div className="text-xs text-muted-foreground flex-1 min-w-[200px] px-2 truncate">
                            {isPremiumUser ? (
                                <span title={vuln.remediation}>{vuln.remediation}</span>
                            ) : (
                                <Tooltip>
                                    <TooltipTrigger asChild>
                                        <span className="flex items-center gap-1 cursor-help">
                                            <LockIcon className="h-3 w-3 text-accent"/> Premium
                                        </span>
                                    </TooltipTrigger>
                                    <TooltipContent>
                                        <p>Active Premium para ver la remediación.</p>
                                    </TooltipContent>
                                </Tooltip>
                            )}
                        </div>
                        {/* Column 8: Details Toggle Icon (Chevron) */}
                        <div className="text-center w-[40px] shrink-0 flex justify-center items-center">
                           {isPremiumUser &&  <ChevronDown className="h-5 w-5 text-muted-foreground transition-transform duration-200 group-data-[state=open]:rotate-180" /> }
                           {!isPremiumUser && <div className="w-5 h-5"></div>} {/* Placeholder for alignment */}
                        </div>
                      </AccordionTrigger>
                      {isPremiumUser && (
                        <AccordionContent className="p-0">
                            <div className={cn("p-4 space-y-3 text-xs border-t", itemRowClass && `${itemRowClass.replace(/\/10$/, '/20').replace(/\/50$/, '/60')} bg-opacity-75`)}>
                                <div><strong className="text-foreground">Descripción Completa:</strong> {renderMarkdownText(vuln.description)}</div>
                                {vuln.technicalDetails && <div><strong className="text-foreground">Detalles Técnicos:</strong> {renderMarkdownText(vuln.technicalDetails)}</div>}
                                {vuln.businessImpact && <div><strong className="text-foreground">Impacto en el Negocio:</strong> {renderMarkdownText(vuln.businessImpact)}</div>}
                                {vuln.evidence && <div><strong className="text-foreground">Evidencia:</strong> <pre className="whitespace-pre-wrap bg-muted p-2 rounded-md border border-border text-foreground">{vuln.evidence}</pre></div>}
                                {vuln.cvssScore && <div><strong className="text-foreground">Puntuación CVSS:</strong> {vuln.cvssScore}</div>}
                                {vuln.cvssVector && <div><strong className="text-foreground">Vector CVSS:</strong> <code>{vuln.cvssVector}</code></div>}
                            </div>
                        </AccordionContent>
                       )}
                    </AccordionItem>
                  );
                })}
              </Accordion>
            </ScrollArea>
          </CardContent>
        )}
        {!isPremiumUser && findings.length > 0 && (
            <CardContent className="text-center py-8">
                <Sparkles className="h-12 w-12 text-accent mx-auto mb-4" />
                <h3 className="text-lg font-semibold mb-2">Acceso Premium Requerido</h3>
                <p className="text-muted-foreground mb-4 text-sm">
                    Para ver la tabla detallada de todos los hallazgos técnicos, CVSS, impacto, evidencia y sus remediaciones, active el Modo Premium.
                </p>
            </CardContent>
        )}
      </Card>
    </div>
  );
}
