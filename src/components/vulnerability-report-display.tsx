"use client";

import type { AnalysisResult, Vulnerability } from "@/types"; // Import Vulnerability type
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { AlertTriangle, CheckCircle2, FileText, Info, LockKeyhole, ShieldAlert, ShieldCheck, ShieldOff, FileWarning, CircleAlert, AlertCircle } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { Tooltip, TooltipContent, TooltipTrigger } from "@/components/ui/tooltip";
import { ScrollArea } from "@/components/ui/scroll-area"; // Import ScrollArea

type VulnerabilityReportDisplayProps = {
  result: AnalysisResult | null;
};

export function VulnerabilityReportDisplay({ result }: VulnerabilityReportDisplayProps) {
  if (!result) {
    return (
      <Card className="mt-8 shadow-lg">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-xl">
            <Info className="h-6 w-6 text-primary" />
            Esperando Análisis
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-muted-foreground">
            Ingresa una URL arriba y haz clic en "Escanear Vulnerabilidades" para ver el informe de análisis.
          </p>
        </CardContent>
      </Card>
    );
  }

  if (result.error) {
    return (
      <Card className="mt-8 border-destructive bg-destructive/10 shadow-lg">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-xl text-destructive">
            <AlertTriangle className="h-6 w-6" />
            Error de Análisis
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-destructive">{result.error}</p>
        </CardContent>
      </Card>
    );
  }

  const hasVulnerableFindings = result.vulnerabilities && result.vulnerabilities.some(v => v.isVulnerable);

  // Enhanced severity mapping based on the 'severity' field from the AI
  const getSeverityDetails = (severity: Vulnerability['severity']) => {
    switch (severity) {
      case 'High':
        return {
          icon: <ShieldAlert className="h-5 w-5 text-destructive inline-block" />,
          badge: <Badge variant="destructive">Alta</Badge>,
          tooltip: "Vulnerabilidad de alto riesgo.",
          rowClass: "bg-destructive/10",
        };
      case 'Medium':
        return {
          icon: <AlertCircle className="h-5 w-5 text-orange-500 inline-block" />, // Using AlertCircle for Medium
          badge: <Badge variant="outline" className="border-orange-500 text-orange-500">Media</Badge>,
          tooltip: "Vulnerabilidad de riesgo medio.",
          rowClass: "bg-orange-500/10",
        };
      case 'Low':
        return {
          icon: <FileWarning className="h-5 w-5 text-yellow-500 inline-block" />, // Using FileWarning for Low
          badge: <Badge variant="outline" className="border-yellow-500 text-yellow-500">Baja</Badge>,
          tooltip: "Vulnerabilidad de bajo riesgo.",
          rowClass: "bg-yellow-500/10",
        };
      case 'Informational':
      default:
        return {
          icon: <Info className="h-5 w-5 text-blue-500 inline-block" />,
          badge: <Badge variant="outline" className="border-blue-500 text-blue-500">Info</Badge>,
          tooltip: "Hallazgo informativo, puede no ser una vulnerabilidad directa.",
          rowClass: "bg-blue-500/10",
        };
    }
  };

  const renderIconWithTooltip = (icon: React.ReactNode, tooltipText: string) => (
    <Tooltip>
      <TooltipTrigger asChild>
        <span className="inline-flex items-center justify-center">{icon}</span>
      </TooltipTrigger>
      <TooltipContent>
        <p>{tooltipText}</p>
      </TooltipContent>
    </Tooltip>
  );

  return (
    <div className="mt-8 space-y-8">
      {/* Report Summary Card */}
      {result.reportText && (
        <Card className="shadow-lg">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-xl">
              <FileText className="h-6 w-6 text-primary" />
              Informe de Seguridad Generado
            </CardTitle>
          </CardHeader>
          <CardContent>
             {/* Use ScrollArea for potentially long reports */}
             <ScrollArea className="h-[300px] w-full rounded-md border p-4 bg-muted/20">
                <div className="prose prose-sm dark:prose-invert max-w-none whitespace-pre-wrap text-foreground">
                  {/* Render markdown - Consider using a library if complex markdown is expected */}
                  <pre className="whitespace-pre-wrap font-sans">{result.reportText}</pre>
                </div>
             </ScrollArea>
          </CardContent>
        </Card>
      )}

      {/* Detailed Findings Card */}
      <Card className="shadow-lg">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-xl">
            <ShieldCheck className="h-6 w-6 text-primary" /> {/* Changed icon */}
            Hallazgos Detallados del Escaneo
          </CardTitle>
          {result.vulnerabilities && result.vulnerabilities.length === 0 ? (
            <CardDescription>No se identificaron hallazgos específicos durante este escaneo.</CardDescription>
          ) : !hasVulnerableFindings ? (
             <CardDescription>No se detectaron vulnerabilidades activas con las comprobaciones actuales, aunque se listan algunos hallazgos informativos.</CardDescription>
          ) : (
              <CardDescription>Se detectaron las siguientes vulnerabilidades y hallazgos. Prioriza la corrección según la severidad.</CardDescription>
          )}
        </CardHeader>
        {result.vulnerabilities && result.vulnerabilities.length > 0 && (
          <CardContent>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Categoría</TableHead>
                  <TableHead>Hallazgo Específico</TableHead>
                  <TableHead className="text-center">Severidad</TableHead>
                  <TableHead className="text-center">Detectado</TableHead>
                  <TableHead className="text-center">Riesgo Bloqueo Cuenta</TableHead>
                  <TableHead>Solución Recomendada</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {result.vulnerabilities!.map((vuln, index) => {
                  const severityDetails = getSeverityDetails(vuln.severity);
                  const rowClass = vuln.isVulnerable ? severityDetails.rowClass : ""; // Apply class only if vulnerable

                  return (
                    <TableRow key={index} className={rowClass}>
                      <TableCell className="font-medium">{vuln.vulnerability}</TableCell>
                      <TableCell className="text-sm text-muted-foreground">{vuln.description}</TableCell>
                      <TableCell className="text-center">
                         {/* Show severity icon and badge */}
                         {renderIconWithTooltip(
                            <span className="flex items-center justify-center gap-1">
                                {severityDetails.icon}
                                {severityDetails.badge}
                            </span>,
                           severityDetails.tooltip
                         )}
                      </TableCell>
                       <TableCell className="text-center">
                         {/* Icon indicating if specifically detected */}
                        {vuln.isVulnerable ? (
                           renderIconWithTooltip(
                             <CheckCircle2 className="h-5 w-5 text-green-600 inline-block" />,
                             "Detectado"
                           )
                        ) : (
                           renderIconWithTooltip(
                             <ShieldOff className="h-5 w-5 text-muted-foreground inline-block" />,
                             "No Detectado"
                           )
                        )}
                      </TableCell>
                      <TableCell className="text-center">
                         {/* Icon indicating potential for account lockout */}
                        {vuln.potentialForAccountLockout ? (
                           renderIconWithTooltip(
                            <LockKeyhole className="h-5 w-5 text-orange-500 inline-block" />, // Changed color
                            "Sí, posible contribución al bloqueo"
                           )
                        ) : (
                            renderIconWithTooltip(
                              <CheckCircle2 className="h-5 w-5 text-green-600 inline-block" />,
                              "No, bajo riesgo directo de bloqueo"
                            )
                        )}
                      </TableCell>
                      <TableCell className="text-sm text-muted-foreground">{vuln.remediation}</TableCell>
                    </TableRow>
                  );
                })}
              </TableBody>
            </Table>
          </CardContent>
        )}
      </Card>
    </div>
  );
}
