"use client";

import type { AnalysisResult, Vulnerability } from "@/types"; // Import Vulnerability type
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { AlertTriangle, CheckCircle2, FileText, Info, LockKeyhole, ShieldAlert, ShieldCheck, ShieldOff, FileWarning, CircleAlert, AlertCircle } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { Tooltip, TooltipContent, TooltipTrigger } from "@/components/ui/tooltip";
import { ScrollArea } from "@/components/ui/scroll-area"; // Import ScrollArea

type VulnerabilityReportDisplayProps = {
  result: AnalysisResult | null;
};

const renderMarkdownReport = (markdownText: string | null) => {
  if (!markdownText) return null;

  const lines = markdownText.split('\n');
  const elements: JSX.Element[] = [];
  let currentParagraphLines: string[] = [];
  let currentListItems: string[] = [];
  let inList = false;

  const flushParagraph = () => {
    if (currentParagraphLines.length > 0) {
      elements.push(
        <p key={`p-${elements.length}`} className="my-2 text-sm leading-relaxed">
          {/* Replace **text** with <strong>text</strong> for basic bolding */}
          {currentParagraphLines.join('\n').split(/(\*\*.*?\*\*)/g).map((part, index) => {
            if (part.startsWith('**') && part.endsWith('**')) {
              return <strong key={index}>{part.slice(2, -2)}</strong>;
            }
            return part;
          })}
        </p>
      );
      currentParagraphLines = [];
    }
  };

  const flushList = () => {
    if (currentListItems.length > 0) {
      elements.push(
        <ul key={`ul-${elements.length}`} className="list-disc space-y-1 pl-5 my-2 text-sm">
          {currentListItems.map((item, idx) => (
            // Also apply basic bold parsing for list items
            <li key={`li-${elements.length}-${idx}`}>
              {item.split(/(\*\*.*?\*\*)/g).map((part, index) => {
                if (part.startsWith('**') && part.endsWith('**')) {
                  return <strong key={index}>{part.slice(2, -2)}</strong>;
                }
                return part;
              })}
            </li>
          ))}
        </ul>
      );
    }
    currentListItems = [];
    inList = false;
  };

  for (let i = 0; i < lines.length; i++) {
    const line = lines[i];

    if (line.startsWith('# ')) {
      flushParagraph();
      flushList();
      elements.push(<h2 key={`h2-${i}`} className="text-xl font-semibold mt-4 mb-2 pb-1 border-b border-border">{line.substring(2).replace(/\*\*(.*?)\*\*/g, '$1')}</h2>);
    } else if (line.startsWith('## ')) {
      flushParagraph();
      flushList();
      elements.push(<h3 key={`h3-${i}`} className="text-lg font-semibold mt-3 mb-1">{line.substring(3).replace(/\*\*(.*?)\*\*/g, '$1')}</h3>);
    } else if (line.startsWith('### ')) {
      flushParagraph();
      flushList();
      elements.push(<h4 key={`h4-${i}`} className="text-base font-semibold mt-2 mb-1">{line.substring(4).replace(/\*\*(.*?)\*\*/g, '$1')}</h4>);
    } else if (line.startsWith('* ') || line.startsWith('- ')) {
      flushParagraph();
      if (!inList) {
        inList = true;
      }
      currentListItems.push(line.substring(2));
    } else if (line.trim() === '') {
      flushParagraph();
      flushList();
    } else { 
      if (inList) { 
        flushList();
      }
      currentParagraphLines.push(line);
    }
  }

  flushParagraph();
  flushList(); 

  return <div className="space-y-1">{elements}</div>;
};


export function VulnerabilityReportDisplay({ result }: VulnerabilityReportDisplayProps) {
  if (!result) {
    return (
      <Card className="mt-8 shadow-lg">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-xl">
            <Info className="h-6 w-6 text-primary" />
            Esperando Análisis
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-muted-foreground">
            Ingresa una URL arriba y haz clic en "Escanear Vulnerabilidades" para ver el informe de análisis.
          </p>
        </CardContent>
      </Card>
    );
  }

  if (result.error) {
    return (
      <Card className="mt-8 border-destructive bg-destructive/10 shadow-lg">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-xl text-destructive">
            <AlertTriangle className="h-6 w-6" />
            Error de Análisis
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-destructive">{result.error}</p>
        </CardContent>
      </Card>
    );
  }

  const hasVulnerableFindings = result.vulnerabilities && result.vulnerabilities.some(v => v.isVulnerable);

  const getSeverityDetails = (severity: Vulnerability['severity']) => {
    switch (severity) {
      case 'High':
        return {
          icon: <ShieldAlert className="h-5 w-5 text-destructive inline-block" />,
          badge: <Badge variant="destructive">Alta</Badge>,
          tooltip: "Vulnerabilidad de alto riesgo.",
          rowClass: "bg-destructive/10",
        };
      case 'Medium':
        return {
          icon: <AlertCircle className="h-5 w-5 text-orange-500 inline-block" />,
          badge: <Badge variant="outline" className="border-orange-500 text-orange-500">Media</Badge>,
          tooltip: "Vulnerabilidad de riesgo medio.",
          rowClass: "bg-orange-500/10",
        };
      case 'Low':
        return {
          icon: <FileWarning className="h-5 w-5 text-yellow-500 inline-block" />,
          badge: <Badge variant="outline" className="border-yellow-500 text-yellow-500">Baja</Badge>,
          tooltip: "Vulnerabilidad de bajo riesgo.",
          rowClass: "bg-yellow-500/10",
        };
      case 'Informational':
      default:
        return {
          icon: <Info className="h-5 w-5 text-blue-500 inline-block" />,
          badge: <Badge variant="outline" className="border-blue-500 text-blue-500">Info</Badge>,
          tooltip: "Hallazgo informativo, puede no ser una vulnerabilidad directa.",
          rowClass: "bg-blue-500/10",
        };
    }
  };

  const renderIconWithTooltip = (icon: React.ReactNode, tooltipText: string) => (
    <Tooltip>
      <TooltipTrigger asChild>
        <span className="inline-flex items-center justify-center">{icon}</span>
      </TooltipTrigger>
      <TooltipContent>
        <p>{tooltipText}</p>
      </TooltipContent>
    </Tooltip>
  );

  return (
    <div className="mt-8 space-y-8">
      {result.reportText && (
        <Card className="shadow-lg">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-xl">
              <FileText className="h-6 w-6 text-primary" />
              Informe de Seguridad Generado
            </CardTitle>
          </CardHeader>
          <CardContent>
             <ScrollArea className="h-[350px] w-full rounded-md border border-border p-4 bg-secondary/20">
                <div className="max-w-none text-foreground">
                  {renderMarkdownReport(result.reportText)}
                </div>
             </ScrollArea>
          </CardContent>
        </Card>
      )}

      <Card className="shadow-lg">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-xl">
            <ShieldCheck className="h-6 w-6 text-primary" />
            Hallazgos Detallados del Escaneo
          </CardTitle>
          {result.vulnerabilities && result.vulnerabilities.length === 0 ? (
            <CardDescription>No se identificaron hallazgos específicos durante este escaneo.</CardDescription>
          ) : !hasVulnerableFindings ? (
             <CardDescription>No se detectaron vulnerabilidades activas con las comprobaciones actuales, aunque se listan algunos hallazgos informativos.</CardDescription>
          ) : (
              <CardDescription>Se detectaron las siguientes vulnerabilidades y hallazgos. Prioriza la corrección según la severidad.</CardDescription>
          )}
        </CardHeader>
        {result.vulnerabilities && result.vulnerabilities.length > 0 && (
          <CardContent>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Categoría</TableHead>
                  <TableHead>Hallazgo Específico</TableHead>
                  <TableHead className="text-center">Severidad</TableHead>
                  <TableHead className="text-center">Detectado</TableHead>
                  <TableHead className="text-center">Riesgo Bloqueo Cuenta</TableHead>
                  <TableHead>Solución Recomendada</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {result.vulnerabilities!.map((vuln, index) => {
                  const severityDetails = getSeverityDetails(vuln.severity);
                  const rowClass = vuln.isVulnerable ? severityDetails.rowClass : ""; 

                  return (
                    <TableRow key={index} className={rowClass}>
                      <TableCell className="font-medium">{vuln.vulnerability}</TableCell>
                      <TableCell className="text-sm text-muted-foreground">{vuln.description}</TableCell>
                      <TableCell className="text-center">
                         {renderIconWithTooltip(
                            <span className="flex items-center justify-center gap-1">
                                {severityDetails.icon}
                                {severityDetails.badge}
                            </span>,
                           severityDetails.tooltip
                         )}
                      </TableCell>
                       <TableCell className="text-center">
                        {vuln.isVulnerable ? (
                           renderIconWithTooltip(
                             <CheckCircle2 className="h-5 w-5 text-green-600 inline-block" />,
                             "Detectado"
                           )
                        ) : (
                           renderIconWithTooltip(
                             <ShieldOff className="h-5 w-5 text-muted-foreground inline-block" />,
                             "No Detectado"
                           )
                        )}
                      </TableCell>
                      <TableCell className="text-center">
                        {vuln.potentialForAccountLockout ? (
                           renderIconWithTooltip(
                            <LockKeyhole className="h-5 w-5 text-orange-500 inline-block" />,
                            "Sí, posible contribución al bloqueo"
                           )
                        ) : (
                            renderIconWithTooltip(
                              <CheckCircle2 className="h-5 w-5 text-green-600 inline-block" />,
                              "No, bajo riesgo directo de bloqueo"
                            )
                        )}
                      </TableCell>
                      <TableCell className="text-sm text-muted-foreground">{vuln.remediation}</TableCell>
                    </TableRow>
                  );
                })}
              </TableBody>
            </Table>
          </CardContent>
        )}
      </Card>
    </div>
  );
}
