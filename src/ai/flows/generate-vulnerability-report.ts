'use server';

/**
 * @fileOverview A Genkit flow for generating a detailed vulnerability report from a user registration page URL analysis.
 *
 * - generateVulnerabilityReport - A function that handles the generation of the vulnerability report.
 */

import {ai} from '@/ai/genkit';
// Import schemas and types from the centralized ai-schemas.ts file
import {
  GenerateVulnerabilityReportInputSchema,
  type GenerateVulnerabilityReportInput,
  GenerateVulnerabilityReportOutputSchema,
  type GenerateVulnerabilityReportOutput,
  // VulnerabilityFindingSchema is implicitly used via GenerateVulnerabilityReportInputSchema
} from '@/types/ai-schemas';


export async function generateVulnerabilityReport(
  input: GenerateVulnerabilityReportInput
): Promise<GenerateVulnerabilityReportOutput> {
  return generateVulnerabilityReportFlow(input);
}

const generateVulnerabilityReportPrompt = ai.definePrompt({
  name: 'generateVulnerabilityReportPrompt',
  input: {schema: GenerateVulnerabilityReportInputSchema}, // Uses imported schema
  output: {schema: GenerateVulnerabilityReportOutputSchema}, // Uses imported schema
  prompt: `
  You are a cybersecurity analyst tasked with creating a detailed and professional security report based on an automated vulnerability scan of a user registration page.

  Analyzed URL: {{{url}}}

  Scan Results Overview:
  - Overall Risk Assessment: {{{analysisResults.overallRiskAssessment}}}
  - Initial Scan Summary: {{{analysisResults.executiveSummaryFromScan}}}
  - Total Vulnerable Findings: {{analysisResults.vulnerableFindingsCount}}
    - High Severity: {{analysisResults.highSeverityCount}}
    - Medium Severity: {{analysisResults.mediumSeverityCount}}
    - Low Severity: {{analysisResults.lowSeverityCount}}

  Detailed Findings:
  {{#if analysisResults.findings.length}}
    {{#each analysisResults.findings}}
      {{#if this.isVulnerable}}
  - Vulnerability Category: {{this.vulnerability}}
    - Specific Observation: {{this.description}}
    - Severity: {{this.severity}}
    - Potential for Account Lockout: {{this.potentialForAccountLockout}}
    - Recommended Remediation: {{this.remediation}}
      {{/if}}
    {{/each}}
  {{else}}
  No specific findings were reported by the scan.
  {{/if}}

  Instructions:
  Generate a comprehensive vulnerability report based *only* on the provided scan results. Structure the report logically:
  1.  **Executive Summary (Report):** Write a new, slightly more detailed executive summary for this report. Start by stating the overall security posture based on the 'Overall Risk Assessment' and the number of high/medium severity findings from the scan. Briefly elaborate on the key risks implied by the findings.
  2.  **Detailed Findings Section:** For each vulnerability where 'isVulnerable' is true from the 'Detailed Findings' list above:
      *   Clearly state the **Vulnerability Category** and **Severity**.
      *   Explain the **Specific Finding** (from 'Specific Observation').
      *   Describe the **Potential Impact** in simple terms (e.g., "Could allow attackers to steal user session cookies," "Might enable attackers to lock out legitimate users," "Could lead to exposure of sensitive information"). Consider both the severity and the 'potentialForAccountLockout' flag.
      *   List the **Recommended Remediation**.
  3.  **Conclusion and Recommendations:** Briefly reiterate the key risks and emphasize the importance of addressing the identified vulnerabilities. If no active vulnerabilities were found, recommend general security best practices like regular audits and secure coding.

  Format the report using markdown for readability (e.g., use headings like ## Executive Summary, ### Detailed Findings, #### [Vulnerability Category], bullet points for lists).
  If 'analysisResults.vulnerableFindingsCount' is 0 or 'analysisResults.findings' is empty, the report should state that the scan did not detect specific active issues based on the checks performed, but still recommend general security best practices.
  Focus solely on the information provided. Do not invent new vulnerabilities or impacts.
  `,
});


const generateVulnerabilityReportFlow = ai.defineFlow(
  {
    name: 'generateVulnerabilityReportFlow',
    inputSchema: GenerateVulnerabilityReportInputSchema, // Uses imported schema
    outputSchema: GenerateVulnerabilityReportOutputSchema, // Uses imported schema
  },
  async (input): Promise<GenerateVulnerabilityReportOutput> => {
    // Prepare a simplified input for the prompt if analysisResults are too complex or for safety
    // The handlebars template will access properties of analysisResults directly.
    const promptInput = {
        url: input.url,
        analysisResults: {
            findings: input.analysisResults.findings,
            overallRiskAssessment: input.analysisResults.overallRiskAssessment,
            executiveSummaryFromScan: input.analysisResults.executiveSummaryFromScan, // Use the renamed field
            vulnerableFindingsCount: input.analysisResults.vulnerableFindingsCount ?? input.analysisResults.findings.filter(f => f.isVulnerable).length,
            highSeverityCount: input.analysisResults.highSeverityCount ?? input.analysisResults.findings.filter(f => f.isVulnerable && f.severity === 'High').length,
            mediumSeverityCount: input.analysisResults.mediumSeverityCount ?? input.analysisResults.findings.filter(f => f.isVulnerable && f.severity === 'Medium').length,
            lowSeverityCount: input.analysisResults.lowSeverityCount ?? input.analysisResults.findings.filter(f => f.isVulnerable && f.severity === 'Low').length,
        }
    };

    const {output} = await generateVulnerabilityReportPrompt(promptInput);
    // Ensure a report is always returned, even if empty or stating no findings.
    return output || { report: "No vulnerabilities were detected in this scan, or the analysis could not generate a report." };
  }
);
