/**
 * @fileOverview Centralized Zod schemas and TypeScript types for AI flows.
 * This file does not use 'use server' and can be safely imported by server components/actions
 * and AI flow definitions.
 */
import { z } from 'zod';

// Schemas and types for analyze-vulnerabilities flow
export const VulnerabilityFindingSchema = z.object({
  vulnerability: z.string().describe('The identified vulnerability category (e.g., Cross-Site Scripting (XSS), SQL Injection, Weak Password Policy, Missing Rate Limiting, Insecure Configuration).'),
  description: z.string().describe('A brief description of the specific finding related to the vulnerability category.'),
  isVulnerable: z.boolean().describe('Whether the URL shows signs of being vulnerable to this specific finding.'),
  severity: z.enum(['Low', 'Medium', 'High', 'Informational']).describe('The estimated severity of the vulnerability finding.'),
  potentialForAccountLockout: z
    .boolean()
    .describe('Whether this specific finding could directly contribute to account lockouts.'),
  remediation: z.string().describe('Suggested remediation steps to address the finding.'),
});
export type VulnerabilityFinding = z.infer<typeof VulnerabilityFindingSchema>;

export const AnalyzeVulnerabilitiesInputSchema = z.object({
  url: z.string().url().describe('The URL of the user registration page to analyze.'),
});
export type AnalyzeVulnerabilitiesInput = z.infer<typeof AnalyzeVulnerabilitiesInputSchema>;

export const AnalyzeVulnerabilitiesOutputSchema = z.object({
  findings: z.array(VulnerabilityFindingSchema).describe("A list of all identified vulnerability findings, both active and informational."),
  overallRiskAssessment: z.enum(["Low", "Medium", "High", "Critical", "Informational"]).describe("An overall risk assessment for the analyzed URL based on the findings. 'Critical' for multiple High, 'High' if at least one High, 'Medium' if Mediums exist without Highs, 'Low' for Lows only, 'Informational' if no active vulnerabilities."),
  executiveSummary: z.string().describe("A concise executive summary (2-3 sentences) of the security posture of the registration page, highlighting key risks if any."),
  vulnerableFindingsCount: z.number().optional().describe("The total count of findings where isVulnerable is true. To be calculated in code."),
  highSeverityCount: z.number().optional().describe("Count of high severity vulnerable findings. To be calculated in code."),
  mediumSeverityCount: z.number().optional().describe("Count of medium severity vulnerable findings. To be calculated in code."),
  lowSeverityCount: z.number().optional().describe("Count of low severity vulnerable findings. To be calculated in code."),
});
export type AnalyzeVulnerabilitiesOutput = z.infer<typeof AnalyzeVulnerabilitiesOutputSchema>;


// Schemas and types for generate-attack-vectors flow
export const AttackVectorItemSchema = z.object({
  vulnerabilityName: z.string().describe('The name/category of the vulnerability this attack vector is based on.'),
  attackScenarioDescription: z.string().describe('A description of how an attacker might exploit this vulnerability. Tailor to the vulnerability type.'),
  examplePayloadOrTechnique: z.string().describe('An example of a malicious payload, code snippet, or technique an attacker might use. This should be illustrative and for educational purposes only.'),
  expectedOutcomeIfSuccessful: z.string().describe('The expected outcome if the attack is successful, e.g., "Account lockout", "Unauthorized data access", "Cross-Site Scripting execution", "SQL Injection successful".'),
});
export type AttackVectorItem = z.infer<typeof AttackVectorItemSchema>;

export const GenerateAttackVectorsInputSchema = z.array(VulnerabilityFindingSchema); // Uses VulnerabilityFindingSchema from above
export type GenerateAttackVectorsInput = z.infer<typeof GenerateAttackVectorsInputSchema>;

export const GenerateAttackVectorsOutputSchema = z.array(AttackVectorItemSchema);
export type GenerateAttackVectorsOutput = z.infer<typeof GenerateAttackVectorsOutputSchema>;


// Schemas and types for generate-vulnerability-report flow
export const GenerateVulnerabilityReportInputSchema = z.object({
  url: z.string().url().describe("The URL that was analyzed."),
  analysisResults: z.object({ // Mirror structure of AnalyzeVulnerabilitiesOutput
    findings: z.array(VulnerabilityFindingSchema).describe("A list of all identified vulnerability findings, both active and informational."),
    overallRiskAssessment: z.enum(["Low", "Medium", "High", "Critical", "Informational"]).describe("An overall risk assessment for the analyzed URL based on the findings."),
    executiveSummaryFromScan: z.string().describe("The concise executive summary generated by the initial scan."),
    vulnerableFindingsCount: z.number().optional(),
    highSeverityCount: z.number().optional(),
    mediumSeverityCount: z.number().optional(),
    lowSeverityCount: z.number().optional(),
  }).describe("The structured results from the initial vulnerability analysis."),
});
export type GenerateVulnerabilityReportInput = z.infer<typeof GenerateVulnerabilityReportInputSchema>;

export const GenerateVulnerabilityReportOutputSchema = z.object({
  report: z
    .string()
    .describe(
      'A detailed, well-structured vulnerability report summarizing the findings, explaining the risks, and prioritizing based on severity. Should be formatted for readability in Markdown.'
    ),
});
export type GenerateVulnerabilityReportOutput = z.infer<typeof GenerateVulnerabilityReportOutputSchema>;
