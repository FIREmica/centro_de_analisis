
"use client";

import type { AnalysisResult } from "@/types";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { AlertTriangle, CheckCircle2, FileText, Info, LockKeyhole, ShieldAlert, ShieldCheck, ShieldOff } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { Tooltip, TooltipContent, TooltipTrigger } from "@/components/ui/tooltip";

type VulnerabilityReportDisplayProps = {
  result: AnalysisResult | null;
};

export function VulnerabilityReportDisplay({ result }: VulnerabilityReportDisplayProps) {
  if (!result) {
    return (
      <Card className="mt-8 shadow-lg">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-xl">
            <Info className="h-6 w-6 text-primary" />
            Esperando Análisis
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-muted-foreground">
            Ingresa una URL arriba y haz clic en "Escanear Vulnerabilidades" para ver el informe de análisis.
          </p>
        </CardContent>
      </Card>
    );
  }

  if (result.error) {
    return (
      <Card className="mt-8 border-destructive bg-destructive/10 shadow-lg">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-xl text-destructive">
            <AlertTriangle className="h-6 w-6" />
            Error de Análisis
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-destructive">{result.error}</p>
        </CardContent>
      </Card>
    );
  }
  
  const hasVulnerabilities = result.vulnerabilities && result.vulnerabilities.length > 0;

  const getSeverity = (isVulnerable: boolean, potentialForAccountLockout: boolean) => {
    if (isVulnerable && potentialForAccountLockout) {
      return {
        icon: <ShieldAlert className="h-5 w-5 text-destructive inline-block" />,
        badge: <Badge variant="destructive" className="ml-2">Riesgo Alto</Badge>,
        tooltip: "Vulnerabilidad de alto riesgo con potencial de bloqueo de cuenta.",
        textColor: "text-destructive",
      };
    } else if (isVulnerable) {
      return {
        icon: <AlertTriangle className="h-5 w-5 text-accent inline-block" />, 
        badge: <Badge variant="outline" className="ml-2 border-accent text-accent">Riesgo Medio</Badge>,
        tooltip: "Vulnerabilidad de riesgo medio detectada.",
        textColor: "text-accent",
      };
    } else {
      return {
        icon: <ShieldCheck className="h-5 w-5 text-green-600 inline-block" />, 
        badge: <Badge variant="outline" className="ml-2 border-green-500 text-green-600">Seguro</Badge>,
        tooltip: "Esta verificación específica pasó, se considera segura en este contexto.",
        textColor: "text-green-600",
      };
    }
  };

  const renderIconWithTooltip = (icon: React.ReactNode, tooltipText: string) => (
    <Tooltip>
      <TooltipTrigger asChild>
        <span className="inline-flex items-center justify-center">{icon}</span>
      </TooltipTrigger>
      <TooltipContent>
        <p>{tooltipText}</p>
      </TooltipContent>
    </Tooltip>
  );

  return (
    <div className="mt-8 space-y-8">
      {result.reportText && (
        <Card className="shadow-lg">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-xl">
              <FileText className="h-6 w-6 text-primary" />
              Informe de Seguridad Generado
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="prose dark:prose-invert max-w-none whitespace-pre-wrap text-foreground text-sm">
              {result.reportText}
            </div>
          </CardContent>
        </Card>
      )}

      <Card className="shadow-lg">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-xl">
            <ShieldAlert className="h-6 w-6 text-primary" />
            Hallazgos Detallados de Vulnerabilidad
          </CardTitle>
          {!hasVulnerabilities && (
            <CardDescription>No se detectaron vulnerabilidades específicas en este escaneo.</CardDescription>
          )}
        </CardHeader>
        {hasVulnerabilities && (
          <CardContent>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Vulnerabilidad</TableHead>
                  <TableHead className="text-center">Severidad</TableHead>
                  <TableHead className="text-center">Detectado</TableHead>
                  <TableHead className="text-center">Riesgo de Bloqueo de Cuenta</TableHead>
                  <TableHead>Solución Recomendada</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {result.vulnerabilities!.map((vuln, index) => {
                  const severity = getSeverity(vuln.isVulnerable, vuln.potentialForAccountLockout);
                  return (
                    <TableRow key={index} className={vuln.isVulnerable ? "bg-muted/30" : ""}>
                      <TableCell className="font-medium">{vuln.vulnerability}</TableCell>
                      <TableCell className="text-center">
                        {renderIconWithTooltip(
                          <span className={`flex items-center justify-center ${severity.textColor}`}>
                            {severity.icon}
                            {severity.badge}
                          </span>,
                          severity.tooltip
                        )}
                      </TableCell>
                       <TableCell className="text-center">
                        {vuln.isVulnerable ? (
                           renderIconWithTooltip(
                             <ShieldCheck className="h-5 w-5 text-green-600 inline-block" />, 
                             "Vulnerabilidad Detectada"
                           )
                        ) : (
                           renderIconWithTooltip(
                             <ShieldOff className="h-5 w-5 text-muted-foreground inline-block" />,
                             "No Detectada"
                           )
                        )}
                      </TableCell>
                      <TableCell className="text-center">
                        {vuln.potentialForAccountLockout ? (
                           renderIconWithTooltip(
                            <LockKeyhole className="h-5 w-5 text-destructive inline-block" />,
                            "Potencial de Bloqueo de Cuenta"
                           )
                        ) : (
                            renderIconWithTooltip(
                              <CheckCircle2 className="h-5 w-5 text-green-600 inline-block" />,
                              "Bajo Riesgo de Bloqueo de Cuenta"
                            )
                        )}
                      </TableCell>
                      <TableCell className="text-sm text-muted-foreground">{vuln.remediation}</TableCell>
                    </TableRow>
                  );
                })}
              </TableBody>
            </Table>
          </CardContent>
        )}
      </Card>
    </div>
  );
}
